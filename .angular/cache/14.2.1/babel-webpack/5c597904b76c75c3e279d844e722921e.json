{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet GoogleMapComponent = class GoogleMapComponent {\n  constructor(mapService, el, ngZone) {\n    this.mapService = mapService;\n    this.el = el;\n    this.ngZone = ngZone;\n    this.searchAddress = '';\n  }\n\n  ngOnInit() {\n    // this.mapService.initializeMap(this.el.nativeElement.querySelector('#map'));\n    this.marker = this.mapService.getMarker();\n    this.initAutocomplete();\n    this.subscription = this.mapService.locationNameUpdated.subscribe(locationName => {\n      // console.log(locationName);\n      this.searchAddress = locationName;\n    }); // Create infoWindow with a custom content\n\n    this.infoWindow = new google.maps.InfoWindow({\n      content: `\n      <div> \n      <div class=\"text-primary fw-bold mb-2\" style=\"font-size: 17px\">Your laundry will be picked-up here</div> \n      <div class=\"text-muted\">Please move the map to adjust your location</div>\n       </div>\n      `\n    });\n  }\n\n  ngAfterContentInit() {\n    this.mapService.initializeMap(this.el.nativeElement.querySelector('#map'));\n    this.map = this.mapService.getMap();\n    this.marker = this.mapService.getMarker();\n  }\n\n  getCurrentLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const userLocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        this.mapService.setMapCenter(userLocation.lat, userLocation.lng);\n        this.mapService.setMapZoomLevel(18);\n        this.infoWindow.open(this.map, this.marker);\n      }, error => {\n        console.error('Error getting current location:', error);\n      });\n    } else {\n      console.error('Geolocation is not supported by this browser.');\n    }\n  }\n\n  initAutocomplete() {\n    this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('searchInput'), {\n      types: ['geocode'] // Specify the type of place data to return\n\n    });\n    this.autocomplete.addListener('place_changed', () => {\n      this.ngZone.run(() => {\n        const place = this.autocomplete.getPlace();\n\n        if (place.geometry && place.geometry.location) {\n          // Handle the selected place here\n          console.log(place);\n          const location = place.geometry.location;\n          this.mapService.setMapCenter(location.lat(), location.lng());\n          this.mapService.setMapZoomLevel(18);\n          this.infoWindow.open(this.map, this.marker);\n        } else {\n          console.error('Invalid place selected:', place);\n        }\n      });\n    });\n  }\n\n  searchPlaces(query) {\n    const placesService = this.mapService.getPlacesService();\n    const request = {\n      query: query,\n      fields: ['name', 'geometry']\n    };\n    placesService.findPlaceFromQuery(request, (results, status) => {\n      if (status === 'OK' && results && results[0].geometry) {\n        const location = results[0].geometry.location;\n        this.mapService.setMapCenter(location.lat(), location.lng());\n      } else {\n        console.error('Error searching for places:', status);\n      }\n    });\n  }\n\n  onSearchInputClick() {\n    // Clear the input field when clicked\n    this.searchAddress = '';\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n};\n\n__decorate([ViewChild('searchInput')], GoogleMapComponent.prototype, \"searchInput\", void 0);\n\nGoogleMapComponent = __decorate([Component({\n  selector: 'app-google-map',\n  templateUrl: './google-map.component.html',\n  styleUrls: ['./google-map.component.css']\n})], GoogleMapComponent);\nexport { GoogleMapComponent };","map":null,"metadata":{},"sourceType":"module"}