{"ast":null,"code":"import { NgZone, ElementRef } from '@angular/core';\nimport { UserLocation } from './location-model';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/map.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../navbar/navbar.component\";\nconst _c0 = [\"searchInput\"];\nexport let GoogleMapComponent = /*#__PURE__*/(() => {\n  class GoogleMapComponent {\n    constructor(mapService, el, http, router, ngZone) {\n      this.mapService = mapService;\n      this.el = el;\n      this.http = http;\n      this.router = router;\n      this.ngZone = ngZone;\n      this.searchAddress = '';\n      this.locationDetail = null;\n    }\n\n    ngOnInit() {\n      // this.mapService.initializeMap(this.el.nativeElement.querySelector('#map'));\n      this.marker = this.mapService.getMarker();\n      this.initAutocomplete();\n      this.subscription = this.mapService.locationNameUpdated.subscribe(locationName => {\n        // console.log(locationName);\n        this.searchAddress = locationName;\n      });\n      this.locDetSubscription = this.mapService.locationDetailUpdated.subscribe(locationDetail => {\n        this.locationDetail = locationDetail;\n      }); // Create infoWindow with a custom content\n\n      this.infoWindow = new google.maps.InfoWindow({\n        content: `\n        <div>\n        <div class=\"text-primary fw-bold mb-2\" style=\"font-size:\n  17px\">Your laundry will be picked-up here</div>\n        <div class=\"text-muted\">Please move the map to adjust your location</div>\n         </div>\n        `\n      });\n    }\n\n    ngAfterContentInit() {\n      this.mapService.initializeMap(this.el.nativeElement.querySelector('#map'));\n      this.map = this.mapService.getMap();\n      this.marker = this.mapService.getMarker();\n    }\n\n    getCurrentLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const userLocation = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          this.mapService.setMapCenter(userLocation.lat, userLocation.lng);\n          this.mapService.setMapZoomLevel(18);\n          this.infoWindow.open(this.map, this.marker);\n        }, error => {\n          console.error('Error getting current location:', error);\n        });\n      } else {\n        console.error('Geolocation is not supported by this browser.');\n      }\n    }\n\n    initAutocomplete() {\n      this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('searchInput'), {\n        types: ['geocode'] // Specify the type of place data to return\n\n      });\n      this.autocomplete.addListener('place_changed', () => {\n        this.ngZone.run(() => {\n          const place = this.autocomplete.getPlace();\n\n          if (place.geometry && place.geometry.location) {\n            // Handle the selected place here\n            // console.log(place);\n            const location = place.geometry.location;\n            this.mapService.setMapCenter(location.lat(), location.lng());\n            this.mapService.setMapZoomLevel(18);\n            this.infoWindow.open(this.map, this.marker);\n          } else {\n            console.error('Invalid place selected:', place);\n          }\n        });\n      });\n    }\n\n    searchPlaces(query) {\n      const placesService = this.mapService.getPlacesService();\n      const request = {\n        query: query,\n        fields: ['name', 'geometry']\n      };\n      placesService.findPlaceFromQuery(request, (results, status) => {\n        if (status === 'OK' && results && results[0].geometry) {\n          const location = results[0].geometry.location;\n          this.mapService.setMapCenter(location.lat(), location.lng());\n        } else {\n          console.error('Error searching for places:', status);\n        }\n      });\n    }\n\n    onSearchInputClick() {\n      // Clear the input field when clicked\n      this.searchAddress = '';\n    } // pickupLocation(){\n    //   if(this.searchAddress && this.locationDetail){\n    //     console.log(this.searchAddress);\n    //   // console.log(this.locationDetail);\n    //   const location = this.getAddressComponents(this.locationDetail);\n    //   console.log(location);\n    //   }\n    // }\n\n\n    pickupLocation() {\n      if (this.searchAddress && this.locationDetail) {\n        const location = this.getAddressComponents(this.locationDetail);\n        console.log(location); // this.mapService.storeUserLocation(location).subscribe( userData => {\n        //    console.log( 'User Data Stored ', userData); \n        // } \n        // ); \n\n        this.router.navigate(['rate-list']); //  this.http.post('http://localhost:8082/saveAddress', location).subscribe(x => {console.log(x)})\n      }\n\n      ;\n    }\n\n    getAddressComponents(data) {\n      const result = new UserLocation('', // city\n      '', // country\n      '', // fullAddress\n      0, // latitude\n      0, // longitude\n      '', // pincode\n      '', // state\n      '', // addressType\n      0 // userId\n      ); // const result = {\n      //   fullAddress: '',\n      //   pincode: '',\n      //   city: '',\n      //   state: '',\n      //   country: '',\n      //   lat: 0,\n      //   lng: 0,\n      // }; \n\n      result.fullAddress = data.formatted_address;\n      data.address_components.forEach(component => {\n        const types = component.types;\n\n        if (types.includes('locality')) {\n          result.city = component.long_name;\n        } else if (types.includes('administrative_area_level_1')) {\n          result.state = component.long_name;\n        } else if (types.includes('postal_code')) {\n          result.pincode = component.long_name;\n        } else if (types.includes('country')) {\n          result.country = component.long_name;\n        }\n      });\n      const latLng = this.marker.getPosition(); // Get the marker's position (latitude and longitude)\n\n      result.latitude = latLng.lat(); // Add latitude to the object\n\n      result.longitude = latLng.lng(); // Add longitude to the object\n\n      return result;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n      this.locDetSubscription.unsubscribe();\n    }\n\n  }\n\n  GoogleMapComponent.ɵfac = function GoogleMapComponent_Factory(t) {\n    return new (t || GoogleMapComponent)(i0.ɵɵdirectiveInject(i1.MapService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  GoogleMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GoogleMapComponent,\n    selectors: [[\"app-google-map\"]],\n    viewQuery: function GoogleMapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchInput = _t.first);\n      }\n    },\n    decls: 16,\n    vars: 1,\n    consts: [[1, \"map-container\"], [1, \"search-box\"], [1, \"card-body\"], [\"type\", \"text\", \"placeholder\", \"Search here\", \"name\", \"search\", \"id\", \"searchInput\", 1, \"form-control\", \"shadow\", 3, \"ngModel\", \"ngModelChange\", \"click\"], [\"searchInput\", \"\"], [1, \"mt-2\", \"ms-2\"], [1, \"fa-solid\", \"fa-location-crosshairs\"], [1, \"ms-1\", 3, \"click\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [\"id\", \"map\"]],\n    template: function GoogleMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-navbar\");\n        i0.ɵɵelementStart(1, \"div\", 0)(2, \"div\", 1)(3, \"div\", 2)(4, \"div\")(5, \"input\", 3, 4);\n        i0.ɵɵlistener(\"ngModelChange\", function GoogleMapComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.searchAddress = $event;\n        })(\"click\", function GoogleMapComponent_Template_input_click_5_listener() {\n          return ctx.onSearchInputClick();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelement(8, \"i\", 6);\n        i0.ɵɵelementStart(9, \"a\", 7);\n        i0.ɵɵlistener(\"click\", function GoogleMapComponent_Template_a_click_9_listener() {\n          return ctx.getCurrentLocation();\n        });\n        i0.ɵɵtext(10, \"Use Currunt Location\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelementStart(12, \"div\", 8)(13, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function GoogleMapComponent_Template_button_click_13_listener() {\n          return ctx.pickupLocation();\n        });\n        i0.ɵɵtext(14, \"STORE LOCATION\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(15, \"div\", 10);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.searchAddress);\n      }\n    },\n    dependencies: [i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.NavbarComponent],\n    styles: [\".map-container[_ngcontent-%COMP%]{position:relative;height:100%;width:100%;transition:.3s ease}.search-box[_ngcontent-%COMP%]{height:150px;width:370px;position:absolute;top:70px;left:50px;z-index:1;background-color:#fff;padding:10px;border-radius:5px;box-shadow:0 0 10px #0000001a}#map[_ngcontent-%COMP%]{height:100vh;width:100%}a[_ngcontent-%COMP%]{text-decoration:none;cursor:pointer}.faded[_ngcontent-%COMP%]{opacity:.8}@media (max-width: 767px){.search-box[_ngcontent-%COMP%]{position:fixed;bottom:20px;top:auto;left:20px}}.gm-style-iw[_ngcontent-%COMP%] + div[_ngcontent-%COMP%]{display:none!important}.custom-info-window[_ngcontent-%COMP%]{background-color:#fff;padding:10px;box-shadow:0 2px 4px #0003}\"]\n  });\n  return GoogleMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}