{"ast":null,"code":"import SwiperCore, { Navigation, Pagination, Scrollbar, A11y, Virtual, Zoom, Autoplay, Thumbs, Controller, EffectCoverflow } from 'swiper/core';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"swiperRef\"]; // Set the default value to '+91' (India)\n// Other component code and functions here\n\nconst FULL_DASH_ARRAY = 283;\nconst TIME_LIMIT = 30;\nconst COLOR_CODES = {\n  info: {\n    color: 'black'\n  },\n  warning: {\n    color: 'orange',\n    threshold: TIME_LIMIT * 0.5 // Change the threshold as needed\n\n  },\n  alert: {\n    color: 'red',\n    threshold: TIME_LIMIT * 0.25 // Change the threshold as needed\n\n  }\n};\nSwiperCore.use([EffectCoverflow, Navigation, Pagination, Scrollbar, A11y, Virtual, Zoom, Autoplay, Thumbs, Controller]);\nexport let ServiceProviderHeaderComponent = /*#__PURE__*/(() => {\n  class ServiceProviderHeaderComponent {\n    constructor() {\n      this.timePassed = 0;\n      this.timeLeft = TIME_LIMIT;\n      this.isTimerHidden = true;\n      this.remainingPathColor = '';\n      this.selectedCountryCode = 'IN';\n      this.buttonText1 = ' By requesting OTP, you agree to the ';\n      this.inputValue = '';\n      this.isButtonHidden = true;\n      this.isButtonDisabled = true;\n      this.input1 = '';\n      this.input2 = '';\n      this.input3 = '';\n      this.input4 = '';\n      this.isInputsValid = false;\n      this.phoneNumber = ''; // Assign an initial value\n      // selectedCountryCode!: string; // Use the non-null assertion operator\n\n      this.isPhoneNumberValid = false; // Assign an initial value\n\n      this.buttonText = 'Request OTP'; // Initial button text\n\n      this.testSwiperConfig = {\n        navigation: false,\n        pagination: {\n          clickable: true\n        },\n        slidesPerView: '3',\n        spaceBetween: 10,\n        breakpoints: {\n          320: {\n            slidesPerView: 1,\n            spaceBetween: 20\n          },\n          // when window width is >= 480px\n          480: {\n            slidesPerView: 3,\n            spaceBetween: 30\n          },\n          // when window width is >= 640px\n          640: {\n            slidesPerView: 3,\n            spaceBetween: 20\n          }\n        }\n      };\n      this.swiperConfig = {\n        navigation: false,\n        pagination: {\n          clickable: true\n        },\n        slidesPerView: '3',\n        spaceBetween: 10,\n        effect: 'coverflow',\n        coverflowEffect: {\n          rotate: 50,\n          stretch: 0,\n          depth: 100,\n          modifier: 1,\n          slideShadows: true\n        },\n        breakpoints: {\n          320: {\n            slidesPerView: 1,\n            spaceBetween: 20\n          },\n          // when window width is >= 480px\n          480: {\n            slidesPerView: 3,\n            spaceBetween: 30\n          },\n          // when window width is >= 640px\n          640: {\n            slidesPerView: 3,\n            spaceBetween: 20\n          }\n        }\n      };\n      this.swiperCarouselConfig = {\n        navigation: true,\n        pagination: {\n          clickable: true\n        },\n        slidesPerView: '1',\n        autoplay: {\n          delay: 2000\n        },\n        effect: 'fade'\n      };\n    }\n\n    checkPhoneNumber() {\n      if (this.phoneNumber.length < 10) {\n        this.phoneNumber = this.phoneNumber.slice(0, 10); // Truncate the input to maximum 10 characters\n      }\n\n      this.isPhoneNumberValid = this.phoneNumber.length === 10;\n    }\n\n    handleKeyDown(event) {\n      const maxLength = 10;\n\n      if (this.phoneNumber.length >= maxLength && event.key !== 'Backspace') {\n        event.preventDefault();\n      }\n    }\n\n    ngOnInit() {}\n\n    onSwiper(swiper) {\n      console.log(swiper);\n    }\n\n    navigateToSection(section) {\n      window.location.hash = '';\n      window.location.hash = section;\n    }\n\n    start() {\n      // Handle the button click event here\n      // This method will be executed when the button is clicked\n      console.log('Start button clicked');\n    }\n\n    onMouseEnter(event) {\n      event.target.click();\n    }\n\n    get circleDasharray() {\n      return `${this.calculateTimeFraction() * FULL_DASH_ARRAY} ${FULL_DASH_ARRAY}`;\n    }\n\n    startTimer() {\n      this.isTimerHidden = false; // Show the timer\n\n      this.timePassed = 0; // Reset the time passed\n\n      this.timeLeft = TIME_LIMIT; // Reset the time left\n\n      this.remainingPathColor = 'black'; // Set initial border color as black\n\n      this.buttonText = 'Resend OTP'; // Update the button text to \"Resend\"\n\n      this.timerInterval = setInterval(() => {\n        this.timePassed += 1;\n        this.timeLeft = TIME_LIMIT - this.timePassed;\n        this.updateRemainingPathColor();\n\n        if (this.timeLeft === 0) {\n          this.onTimesUp();\n          this.isTimerHidden = true; // Hide the timer when it reaches 0\n        }\n      }, 1000);\n    }\n\n    onTimesUp() {\n      clearInterval(this.timerInterval);\n    }\n\n    formatTime(time) {\n      let seconds = time % 60;\n\n      if (seconds < 10) {\n        seconds = `0${seconds}`;\n      }\n\n      return `${seconds}`;\n    }\n\n    updateRemainingPathColor() {\n      const {\n        warning,\n        alert\n      } = COLOR_CODES;\n\n      if (this.timeLeft <= warning.threshold) {\n        this.remainingPathColor = 'orange';\n      }\n\n      if (this.timeLeft <= alert.threshold) {\n        this.remainingPathColor = 'red';\n      }\n    }\n\n    calculateTimeFraction() {\n      const rawTimeFraction = this.timeLeft / TIME_LIMIT;\n      return rawTimeFraction;\n    }\n\n    ngOnDestroy() {\n      this.onTimesUp();\n    }\n\n    onKeyUp(event, nextIndex) {\n      const input = event.target;\n      const maxLength = parseInt(input.getAttribute('maxlength'));\n\n      if (input.value.length >= maxLength) {\n        if (nextIndex !== null) {\n          const nextInput = document.querySelector(`.otp-container input:nth-child(${nextIndex})`);\n\n          if (nextInput) {\n            nextInput.focus();\n          }\n        } else {\n          this.isInputsValid = true;\n        }\n      } else {\n        this.isInputsValid = false;\n      }\n    }\n\n    changeButtonText() {\n      this.buttonText = 'Hello CLOREV';\n    }\n\n    changeText() {\n      const termsLink = document.createElement('a');\n      termsLink.href = 'javascript:void(0)';\n      termsLink.innerText = 'Edit Mob No';\n      termsLink.style.color = '#2596be';\n      termsLink.style.marginLeft = \"-10px\";\n      termsLink.style.paddingRight = \"47px\";\n      termsLink.addEventListener('click', event => {\n        event.preventDefault();\n        const phoneNumberInput = document.getElementById('mob-input');\n        phoneNumberInput.focus();\n      });\n      const privacyLink = document.createElement('a');\n      privacyLink.href = '#';\n      privacyLink.innerText = 'Get OTP on Call';\n      termsLink.style.marginRight = '86px';\n      privacyLink.style.color = '#2596be';\n      const termsSpan = document.createElement('span');\n      termsSpan.style.color = 'var(--clorev-primary)';\n      termsSpan.appendChild(termsLink);\n      const privacySpan = document.createElement('span');\n      privacySpan.style.color = 'var(--clorev-primary)';\n      privacySpan.appendChild(privacyLink);\n      const label = document.querySelector('.form-check-label');\n      label.innerHTML = 'OTP has been sent to above mobile number.<br>';\n      label.appendChild(termsSpan);\n      label.innerHTML += ' ';\n      label.appendChild(privacySpan);\n    }\n\n    onInputChange() {\n      this.isButtonHidden = !this.phoneNumber.trim(); // Hide the button if the input is empty or contains only whitespace characters\n\n      this.isButtonDisabled = !this.phoneNumber.trim(); // Disable the button if the input is empty or contains only whitespace characters\n    }\n\n    clearInput() {\n      this.phoneNumber = '';\n      this.isButtonHidden = true; // Hide the button again after clearing the input\n\n      this.isButtonDisabled = true; // Disable the button again after clearing the input\n    }\n\n  }\n\n  ServiceProviderHeaderComponent.ɵfac = function ServiceProviderHeaderComponent_Factory(t) {\n    return new (t || ServiceProviderHeaderComponent)();\n  };\n\n  ServiceProviderHeaderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ServiceProviderHeaderComponent,\n    selectors: [[\"app-service-provider-header\"]],\n    viewQuery: function ServiceProviderHeaderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.swiperRef = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    template: function ServiceProviderHeaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"service-provider-header works!\");\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return ServiceProviderHeaderComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}