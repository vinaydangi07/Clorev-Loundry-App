{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MapService = /*#__PURE__*/(() => {\n  class MapService {\n    constructor(http) {\n      this.http = http;\n      this.locationNameUpdated = new BehaviorSubject('');\n      this.locationDetailUpdated = new BehaviorSubject(null);\n    }\n\n    initializeMap(mapElement) {\n      this.map = new google.maps.Map(mapElement, {\n        center: {\n          lat: 20.5937,\n          lng: 78.9629\n        },\n        zoom: 13\n      });\n      this.placesService = new google.maps.places.PlacesService(this.map);\n      this.marker = new google.maps.Marker({\n        position: this.map.getCenter(),\n        map: this.map,\n        draggable: false\n      });\n      google.maps.event.addListener(this.map, 'center_changed', () => {\n        const newCenter = this.map.getCenter();\n        this.marker.setPosition(newCenter);\n        this.updateLocationInfo(newCenter.lat(), newCenter.lng());\n      });\n    }\n\n    setMapCenter(lat, lng) {\n      this.map.setCenter({\n        lat,\n        lng\n      });\n      this.marker.setPosition({\n        lat,\n        lng\n      });\n      this.updateLocationInfo(lat, lng);\n    }\n\n    updateLocationInfo(lat, lng) {\n      const geocoder = new google.maps.Geocoder();\n      const latLng = new google.maps.LatLng(lat, lng);\n      geocoder.geocode({\n        'location': latLng\n      }, (results, status) => {\n        if (status === google.maps.GeocoderStatus.OK) {\n          if (results[0]) {\n            const address = results[0].formatted_address;\n            this.locationNameUpdated.next(address);\n            const detailAdress = results[0];\n            this.locationDetailUpdated.next(detailAdress);\n          } else {\n            this.locationNameUpdated.next('Address not found');\n          }\n        } else {\n          this.locationNameUpdated.next('Error fetching address');\n        }\n      });\n    }\n\n    getMap() {\n      return this.map;\n    }\n\n    getMarker() {\n      return this.marker;\n    }\n\n    getPlacesService() {\n      return this.placesService;\n    }\n\n    isMarkerSet() {\n      return !!this.marker;\n    }\n\n    setMapZoomLevel(zoomLevel) {\n      this.map.setZoom(zoomLevel);\n    }\n\n    storeUserLocation(location) {\n      return this.http.post('http://localhost:8081/saveAddress', location);\n    }\n\n  }\n\n  MapService.ɵfac = function MapService_Factory(t) {\n    return new (t || MapService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapService,\n    factory: MapService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapService;\n})();","map":null,"metadata":{},"sourceType":"module"}